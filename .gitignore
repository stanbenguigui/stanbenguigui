import random
import itertools
import numpy as np
from collections import defaultdict

valeurs = ["7", "8", "9", "10", "Valet", "Dame", "Roi", "As"]
couleurs = ["Coeur", "Carreau", "Trèfle", "Pique"]
points_values = {"7": 0, "8": 0, "9": 0, "10": 10, "Valet": 2, "Dame": 3, "Roi": 4, "As": 11}
atout_points = {"7": 0, "8": 0, "9": 14, "10": 10, "Valet": 20, "Dame": 3, "Roi": 4, "As": 11}


class Carte:
    def __init__(self, valeur, couleur):
        self.valeur = valeur
        self.couleur = couleur

    def __repr__(self):
        return "{} de {}".format(self.valeur, self.couleur)

    def __eq__(self, other):
        if isinstance(other, Carte):
            return self.valeur == other.valeur and self.couleur == other.couleur
        return False

class Joueur:
    def __init__(self, nom, equipe):
        self.nom = nom
        self.cartes = []
        self.points = 0
        self.equipe = equipe
        self.indice_carte_actuelle = 0
        self.Q = defaultdict(lambda: defaultdict(lambda: 0.0))  # Nouvel attribut



class Equipe:
    def __init__(self):
        self.points = 0
        self.belote = False
        self.dernier_pli = False

class Belote:
    def __init__(self):
        self.cartes = []
        for couleur in couleurs:
            for valeur in valeurs:
                self.cartes.append(Carte(valeur, couleur))
        self.joueurs = []


def distribuer_cartes(jeu, joueur1_cartes):
    random.shuffle(jeu.cartes)

    # Retirer les cartes du joueur 1 du jeu de cartes
    for carte in joueur1_cartes:
        jeu.cartes.remove(carte)

    for joueur in jeu.joueurs:
        if joueur.nom == "Joueur 1":
            joueur.cartes = joueur1_cartes
        else:
            joueur.cartes = random.sample(jeu.cartes, 8)
            for carte in joueur.cartes:
                jeu.cartes.remove(carte)

def saisir_ordre_joueur():
    while True:
        try:
            ordre = int(input("Entrez votre rang de jeu (1-4): "))
            if 1 <= ordre <= 4:
                break
            else:
                print("Veuillez entrer un nombre entre 1 et 4.")
        except ValueError:
            print("Entrée invalide. Veuillez entrer un nombre entre 1 et 4.")
    return ordre


def saisir_main_joueur1():
    abreviations = {
        "7": "7", "8": "8", "9": "9", "T": "10",
        "V": "Valet", "D": "Dame", "R": "Roi", "A": "As"
    }
    cartes = []
    print("Entrez les cartes de la main du joueur 1 (par exemple 7C pour 7 de Coeur) :")
    print("Coeur = C : Carreau = K : Pique = P : Trèfle= T")
    print("Exemple pour toutes les valeurs d'une couleur: 7C 8C 9C TC VC DC RC AC")
    print("Rentrez une carte et taper sur entré avant de passer à la suivante")
    for _ in range(8):
        while True:
            carte_saisie = input().upper()
            if len(carte_saisie) >= 2 and carte_saisie[0] in abreviations.keys() and carte_saisie[1] in ["C", "K", "T", "P"]:
                valeur = abreviations[carte_saisie[0]]
                couleur = {"C": "Coeur", "K": "Carreau", "T": "Trèfle", "P": "Pique"}[carte_saisie[1]]
                carte = Carte(valeur, couleur)
                if carte not in cartes:
                    cartes.append(carte)
                    break
                else:
                    print("Cette carte a déjà été saisie. Veuillez entrer une carte différente.")
            else:
                print("Saisie invalide. Veuillez entrer une carte valide (par exemple 7C pour 7 de Coeur).")
    return cartes




def choisir_carte_ordinateur(joueur, pli, atout):
    cartes_jouables = []
    if len(pli) == 0:
        cartes_jouables = joueur.cartes
    else:
        for carte in joueur.cartes:
            if carte.couleur == pli[0].couleur:
                cartes_jouables.append(carte)
        if len(cartes_jouables) == 0:
            cartes_jouables = joueur.cartes
    return random.choice(cartes_jouables)



def determiner_gagnant_pli(jeu, pli, atout):
    meilleur_carte = pli[0]
    gagnant = jeu.joueurs[0]

    for i in range(1, len(pli)):
        carte = pli[i]
        joueur = jeu.joueurs[i]

        if meilleur_carte.couleur == atout and carte.couleur == atout:
            if atout_points[carte.valeur] > atout_points[meilleur_carte.valeur]:
                meilleur_carte = carte
                gagnant = joueur
        elif carte.couleur == atout:
            meilleur_carte = carte
            gagnant = joueur
        elif carte.couleur == meilleur_carte.couleur:
            if meilleur_carte.couleur != atout and points_values[carte.valeur] > points_values[meilleur_carte.valeur]:
                meilleur_carte = carte
                gagnant = joueur

    return gagnant




# Représenter l'état
def state_representation(joueur, pli, atout):
    state = ""
    for carte in joueur.cartes:
        state += carte.valeur + carte.couleur[0]
    state += "|"
    for carte in pli:
        state += carte.valeur + carte.couleur[0]
    state += "|" + atout
    return state


# Initialiser la table Q et définir les paramètres de l'algorithme
Q = defaultdict(lambda: defaultdict(lambda: 0.0))
alpha = 0.1  # Taux d'apprentissage
gamma = 0.99  # Facteur d'escompte
epsilon = 0.1  # Taux d'exploration

# Convertir une action en une chaîne
def action_to_str(carte):
    return carte.valeur + carte.couleur[0]

# Choisir une action en fonction de l'état et de la table Q
def choisir_carte_ordinateur(joueur, pli, atout, entrainement=True):
    Q = joueur.Q  # Utilisez la table Q du joueur actuel

    etat = state_representation(joueur, pli, atout)
    cartes_jouables = []

    if len(pli) == 0:
        cartes_jouables = joueur.cartes
    else:
        for carte in joueur.cartes:
            if carte.couleur == pli[0].couleur:
                cartes_jouables.append(carte)
        if len(cartes_jouables) == 0:
            cartes_jouables = joueur.cartes

    if entrainement and np.random.rand() < epsilon:
        # Exploration: choisir une action aléatoire
        return random.choice(cartes_jouables)
    else:
        # Exploitation: choisir l'action avec la valeur Q la plus élevée
        q_values = [Q[etat][action_to_str(carte)] for carte in cartes_jouables]
        max_q_value = max(q_values)
        best_actions = [carte for carte, q_value in zip(cartes_jouables, q_values) if q_value == max_q_value]
        return random.choice(best_actions)

# Mettre à jour les valeurs Q
def update_q_values(jeu, pli, atout, joueur, carte_jouee, recompense):
    Q = joueur.Q  # Utilisez la table Q du joueur actuel

    etat = state_representation(joueur, pli, atout)
    action = action_to_str(carte_jouee)
    q_value = Q[etat][action]

    # Calculer la valeur Q cible en fonction de la récompense et du prochain état
    next_state = state_representation(joueur, pli + [carte_jouee], atout)
    next_q_values = [Q[next_state][action_to_str(carte)] for carte in joueur.cartes if carte != carte_jouee]
    if next_q_values:
        max_next_q_value = max(next_q_values)
    else:
        max_next_q_value = 0
    q_target = recompense + gamma * max_next_q_value

    # Mettre à jour la valeur Q
    Q[etat][action] += alpha * (q_target - q_value)


def jouer_manche(joueur1_cartes, atout, equipe1, equipe2, ordre_joueur, entrainement=True):
    jeu = Belote()

    joueur1 = Joueur("Joueur 1", equipe1)
    joueur2 = Joueur("Ordinateur 1", equipe2)
    joueur3 = Joueur("Ordinateur 2", equipe1)
    joueur4 = Joueur("Ordinateur 3", equipe2)

    jeu.joueurs.extend([joueur1, joueur2, joueur3, joueur4])
    jeu.joueurs = jeu.joueurs[ordre_joueur-1:] + jeu.joueurs[:ordre_joueur-1] # ajuster l'ordre des joueurs

    distribuer_cartes(jeu, joueur1_cartes)

    plis = []
    for joueur in jeu.joueurs:
        joueur.indice_carte_actuelle = 0

    for _ in range(0, 8):
        pli = []
        for joueur in jeu.joueurs:
            if entrainement:
                carte = choisir_carte_ordinateur(joueur, pli, atout, entrainement)
            else:
                carte = joueur.cartes[joueur.indice_carte_actuelle]
            pli.append(carte)
        for joueur in jeu.joueurs:
            joueur.indice_carte_actuelle += 1
        gagnant = determiner_gagnant_pli(jeu, pli, atout)

        points = 0
        for carte in pli:
            if carte.couleur == atout:
                points += atout_points[carte.valeur]
            else:
                points += points_values[carte.valeur]
        
        if entrainement:
            # Déterminez la récompense en fonction des points gagnés par l'équipe du joueur
            recompense = points if gagnant.equipe == joueur.equipe else -points
            for joueur, carte_jouee in zip(jeu.joueurs, pli):
                update_q_values(jeu, pli, atout, joueur, carte_jouee, recompense)

        # Belote
        if not gagnant.equipe.belote:
            roi_present = False
            dame_present = False
            for carte in gagnant.cartes:
                if carte.couleur == atout:
                    if carte.valeur == "Roi":
                        roi_present = True
                    elif carte.valeur == "Dame":
                        dame_present = True
                    if roi_present and dame_present:
                        gagnant.equipe.belote = True
                        gagnant.equipe.points += 20
                        break


        gagnant.equipe.points += points
        plis.append(pli)

    # Dernier pli
    gagnant_dernier_pli = determiner_gagnant_pli(jeu, plis[-1], atout)
    gagnant_dernier_pli.equipe.points += 10

    return equipe1.points, equipe2.points

def afficher_resultats(resultats, nb_essais):
    print("\nRésultats pour chaque couleur d'atout (sur {} essais) :".format(nb_essais))
    print("{:<10}".format("Atout"), end="")
    for tranche in range(80, 190, 10):
        print("|{:^10}".format(tranche), end="")
    print("|")

    print("-" * 60)  

    for atout in couleurs:
        print("{:<10}".format(atout), end="")
        for tranche in range(80, 190, 10):
            print("|{:^9.2f}%".format(resultats[atout][tranche]), end="")  
        print("|")





def main():
    joueur1_cartes = saisir_main_joueur1()
    ordre_joueur = saisir_ordre_joueur()  # demander l'ordre du joueur
    atout_couleurs = ["Coeur", "Carreau", "Trèfle", "Pique"]
    nb_essais = 10000
    nb_episodes = 1000  # Ajout de la variable pour les épisodes d'entraînement
    resultats = defaultdict(lambda: defaultdict(int))

    # Entrainement avec Q-Learning
    for episode in range(nb_episodes):
        for atout in couleurs:
            equipe1 = Equipe()
            equipe2 = Equipe()
            jouer_manche(joueur1_cartes, atout, equipe1, equipe2, ordre_joueur, entrainement=True)  # passer l'ordre du joueur

    # Test sans exploration (epsilon = 0)
    epsilon = 0.0
    for atout in couleurs:
        for tranche in range(80, 190, 10):
            nb_victoires = 0
            for _ in range(nb_essais):
                equipe1 = Equipe()
                equipe2 = Equipe()
                points_joueur1, points_autres_joueurs = jouer_manche(joueur1_cartes, atout, equipe1, equipe2, ordre_joueur, entrainement=False)  # passer l'ordre du joueur
                if points_joueur1 >= tranche:
                    nb_victoires += 1
            pourcentage = (nb_victoires / nb_essais) * 100
            resultats[atout][tranche] = pourcentage


    afficher_resultats(resultats, nb_essais)


if __name__ == "__main__":
      main()
